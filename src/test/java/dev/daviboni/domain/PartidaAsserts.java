package dev.daviboni.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PartidaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartidaAllPropertiesEquals(Partida expected, Partida actual) {
        assertPartidaAutoGeneratedPropertiesEquals(expected, actual);
        assertPartidaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartidaAllUpdatablePropertiesEquals(Partida expected, Partida actual) {
        assertPartidaUpdatableFieldsEquals(expected, actual);
        assertPartidaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartidaAutoGeneratedPropertiesEquals(Partida expected, Partida actual) {
        assertThat(expected)
            .as("Verify Partida auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartidaUpdatableFieldsEquals(Partida expected, Partida actual) {
        assertThat(expected)
            .as("Verify Partida relevant properties")
            .satisfies(e -> assertThat(e.getData()).as("check data").isEqualTo(actual.getData()))
            .satisfies(e -> assertThat(e.getLocal()).as("check local").isEqualTo(actual.getLocal()))
            .satisfies(e -> assertThat(e.getPontuacaoTime1()).as("check pontuacaoTime1").isEqualTo(actual.getPontuacaoTime1()))
            .satisfies(e -> assertThat(e.getPontuacaoTime2()).as("check pontuacaoTime2").isEqualTo(actual.getPontuacaoTime2()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartidaUpdatableRelationshipsEquals(Partida expected, Partida actual) {
        assertThat(expected)
            .as("Verify Partida relationships")
            .satisfies(e -> assertThat(e.getTimes()).as("check times").isEqualTo(actual.getTimes()))
            .satisfies(e -> assertThat(e.getCampeonato()).as("check campeonato").isEqualTo(actual.getCampeonato()));
    }
}
