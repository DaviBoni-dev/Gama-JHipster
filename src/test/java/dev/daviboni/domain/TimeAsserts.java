package dev.daviboni.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TimeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeAllPropertiesEquals(Time expected, Time actual) {
        assertTimeAutoGeneratedPropertiesEquals(expected, actual);
        assertTimeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeAllUpdatablePropertiesEquals(Time expected, Time actual) {
        assertTimeUpdatableFieldsEquals(expected, actual);
        assertTimeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeAutoGeneratedPropertiesEquals(Time expected, Time actual) {
        assertThat(expected)
            .as("Verify Time auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeUpdatableFieldsEquals(Time expected, Time actual) {
        assertThat(expected)
            .as("Verify Time relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCidade()).as("check cidade").isEqualTo(actual.getCidade()))
            .satisfies(e -> assertThat(e.getVitorias()).as("check vitorias").isEqualTo(actual.getVitorias()))
            .satisfies(e -> assertThat(e.getDerrotas()).as("check derrotas").isEqualTo(actual.getDerrotas()))
            .satisfies(e -> assertThat(e.getEmpates()).as("check empates").isEqualTo(actual.getEmpates()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeUpdatableRelationshipsEquals(Time expected, Time actual) {
        assertThat(expected)
            .as("Verify Time relationships")
            .satisfies(e -> assertThat(e.getPartidas()).as("check partidas").isEqualTo(actual.getPartidas()));
    }
}
